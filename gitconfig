;                          -`
;          ...            .o+`
;       .+++s+   .h`.    `ooo/
;      `+++%++  .h+++   `+oooo:
;      +++o+++ .hhs++. `+oooooo:
;      +s%%so%.hohhoo'  'oooooo+:
;      `+ooohs+h+sh++`/:  ++oooo+:
;       hh+o+hoso+h+`/++++.+++++++:
;        `+h+++h.+ `/++++++++++++++:
;                 `/+++ooooooooooooo/`
;                ./ooosssso++osssssso+`
;               .oossssso-````/osssss::`
;              -osssssso.      :ssss``to.
;             :osssssss/  Mike  osssl   +
;            /ossssssss/   8a   +sssslb
;          `/ossssso+/:-        -:/+ossss'.-
;         `+sso+:-`                 `.-/+oso:
;        `++:.                           `-/+/
;        .`   github.com/mike325/dotfiles   `/

[init]
    templatedir = ~/.git_template

[core]
    editor = vim
    excludesfile = ~/.git_template/gitignore

[user]
    name  = Mike
    email = mike@prodeveloper.me

[github]
    user = mike325

[color]
    ui          = auto
    diff        = auto
    status      = auto
    branch      = auto
    interactive = auto
    grep        = auto
    log         = auto

[color "branch"]
    current = green
    local   = yellow
    remote  = red

[color "diff"]
    frag = magenta
    meta = yellow
    new  = green
    old  = red

[color "status"]
    added     = green
    changed   = yellow
    untracked = red

[push]
    ; Make `git push` automatically push relevant annotated tags when pushing
    followTags = true

[alias]
;###############################################################################
;                 Just a status                                                #
;###############################################################################

    s = status

;###############################################################################
;                 Get the tag of the current commit                            #
;###############################################################################

    dt  = describe --tag

;###############################################################################
;                 clone recursive                                              #
;###############################################################################

    cn = clone --recursive

;###############################################################################
;                 Clean the repo of all untracked files                        #
;###############################################################################

    cl  = clean -df .  ; Remove all untracked files (excluding ignore ones)
    cla = clean -xdf . ; Remove everything, including ignored files

;###############################################################################
;                 Submodule management                                         #
;###############################################################################

    sb    = submodule
    sbf   = submodule foreach
    sbfp  = submodule foreach git pull
    sbu   = submodule update
    sbur  = submodule update --recursive
    sbui  = submodule update --init
    sbuir = submodule update --init --recursive ; init and update all submodules

;###############################################################################
;                 Quick add files                                              #
;###############################################################################

    a  = add        ; Add stuff
    aa = add --all  ; Add all stuff
    ai = add -i     ; Add interactive stuff

;###############################################################################
;                 Branch management                                            #
;###############################################################################

    b   = branch        ; Show local branches
    ba  = branch --all  ; Show all local and remote branches
    bd  = branch -d     ; Delete a merged branch
    bdd = branch -D     ; Force branch deletion
    br  = branch -m     ; Rename a branch

;###############################################################################
;                 Commit shortcuts                                             #
;###############################################################################

    c   = commit            ; Normal commit
    cm  = commit -m         ; Short commit
    ca  = commit --amend    ; Commit over the last commit

;###############################################################################
;                 Cherry pick commits                                          #
;###############################################################################

    chp  = cherry-pick
    chpc = cherry-pick --continue
    chpa = cherry-pick --abort

;###############################################################################
;                 Diff stuff                                                   #
;###############################################################################

    d   = diff
    dc  = diff --cached
    dk  = diff --check
    dp  = diff --patience

;###############################################################################
;                 Grep something in the current repo                           #
;###############################################################################

    g  = grep -nI --color   ; Grep showing the line number and ignore binaries
    gi = grep -nIi --color  ; Same as above but ignore case

;###############################################################################
;                 Git log stuff                                                #
;###############################################################################

    l   = log                               ; Normal log
    ln  = log --name-status                 ; get files that changed
    lg  = log --graph                       ; Normal log with graph
    ll  = log --pretty=custom               ; Short log with pretty format
    llg = log --graph --pretty=custom       ; Short pretty log with graph
    lln = log --name-status --pretty=custom ; get files that changed

;###############################################################################
;                 Git ls a bit simpler and with grep search                    #
;###############################################################################

    ls = ls-files ; Display tracked files

;###############################################################################
;                 Merge shortcuts                                              #
;###############################################################################

    m  = merge
    ma = merge --abort
    mc = merge --continue
    ms = merge --skip

;###############################################################################
;                 Checkout ** TODO add more shortcuts                          #
;###############################################################################

    o  = checkout       ; checkout shortcut
    ob = checkout -b    ; checkout to a given branch
    od = checkout --    ; Reset the changes in a given file
    or = checkout .     ; Reset the changes of the working space

;###############################################################################
;                 Shortcuts to push changes                                    #
;###############################################################################

    ps    = push                    ; Normal push shortcut
    psom  = push origin master      ; Push master to origin remote
    pshm  = push origin HEAD:master ; push HEAD to master's origin

;###############################################################################
;                 Shortcuts for pull cmd's                                     #
;###############################################################################

    pl    = pull
    plom  = pull origin master
    pb    = pull --rebase
    pbo   = pull --rebase origin
    pbom  = pull --rebase origin master

;###############################################################################
;                 Simple rebase settings                                       #
;###############################################################################

    rb = rebase
    rba = rebase --abort
    rbc = rebase --continue
    rbi = rebase --interactive
    rbs = rebase --skip

;###############################################################################
;                 Reset the HEAD of the repo                                   #
;###############################################################################

    re   = reset
    rh   = reset HEAD
    reh  = reset --hard
    res  = reset --soft

;###############################################################################
;                 Remotes management                                           #
;###############################################################################

    r   = remote             ; remote shortcut
    ra  = remote add         ; Add remote
    rr  = remote rm          ; remove remote
    rm  = remote rename      ; rename remote
    rs  = remote show        ; show info if remote
    rao = remote add origin  ; add origin remote
    rso = remote show origin ; Show origin remote info

;###############################################################################
;                 Stash stuff                                                  #
;###############################################################################

    sc = stash clear
    sl = stash list
    ss = stash save

;###############################################################################
;      SVN compatibility (I have to use this crap, hope no one else need it)   #
;###############################################################################

    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit

;###############################################################################
;                 Custom functions                                             #
;###############################################################################

;   Create a stash of the current changes and then reapply them
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

;   Auto create tags files and place it in .git dir Credits to Tpope
    ctags = "!sh -c '[ -f .git/hooks/ctags ] || git init; .git/hooks/ctags'"

;   Update just one file form specific remote
    updatef  = "!f() { git fetch $1 && git checkout $1 -- $2; }; f"

;   Reset a staged file to its original state (index)
    rf  = "!f() { git reset HEAD $1 && git checkout -- $1; }; f"

;   Push the current branch to the master of a remote
    psrhm = "!f() { git push $1 HEAD:master }; f"

;   Get the filenames of all changes a given commit and the HEAD
    dn  = "!f() { git diff --name-status $1 HEAD; }; f"

;   Remove any given number of commits
    rlc  = "!f(){ git reset --hard HEAD~${1}; }; f"

;   Undo any given number of commits
    ulc  = "!f(){ git reset --soft HEAD~${1}; }; f"

;   Apply, pop or drop a specific stash
    sa = "!f(){ if [ -z $1 ]; then git stash apply; else git stash apply stash@{$1}; fi; }; f"
    sp = "!f(){ if [ -z $1 ]; then git stash pop; else git stash pop stash@{$1}; fi; }; f"
    sd = "!f(){ if [ -z $1 ]; then git stash drop; else git stash drop stash@{$1}; fi; }; f"
    sw = "!f(){ if [ -z $1 ]; then git stash show; else git stash show stash@{$1}; fi; }; f"

;   --------- Below here credits to https://github.com/alrra/dotfiles ---------

;   Remove the tag with the specified tag name if exists and tag the latest
;   commit with that name.
    retag = "!f() { \
        git tag -d $1 &> /dev/null; \
        git tag $1; \
    }; f"

;   Find commits by commit message.
    cm = "!f() { \
        git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
    }; f"

[pretty]
    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    ;                     │        │            │            │             └─ author name
    ;                     │        │            │            └─ message
    ;                     │        │            └─ date (relative)
    ;                     │        └─ decorations (branch, heads or tags)
    ;                     └─ hash (abbreviated)
