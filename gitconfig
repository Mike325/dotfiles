################################################################################
#                                                                              #
#                                     -`                                       #
#                     ...            .o+`                                      #
#                  .+++s+   .h`.    `ooo/                                      #
#                 `+++%++  .h+++   `+oooo:                                     #
#                 +++o+++ .hhs++. `+oooooo:                                    #
#                 +s%%so%.hohhoo'  'oooooo+:                                   #
#                 `+ooohs+h+sh++`/:  ++oooo+:                                  #
#                  hh+o+hoso+h+`/++++.+++++++:                                 #
#                   `+h+++h.+ `/++++++++++++++:                                #
#                            `/+++ooooooooooooo/`                              #
#                           ./ooosssso++osssssso+`                             #
#                          .oossssso-````/osssss::`                            #
#                         -osssssso.      :ssss``to.                           #
#                        :osssssss/  Mike  osssl   +                           #
#                       /ossssssss/   8a   +sssslb                             #
#                     `/ossssso+/:-        -:/+ossss'.-                        #
#                    `+sso+:-`                 `.-/+oso:                       #
#                   `++:.                           `-/+/                      #
#                   .`                                 `/                      #
#                                                                              #
################################################################################

[core]
    editor = vim
    excludesfile = ~/.git_global_ignore

[user]
    name  = Mike
    email = mike@prodeveloper.me

[github]
    user = mike325

[color]
    ui          = auto
    diff        = auto
    status      = auto
    branch      = auto
    interactive = auto
    grep        = auto
    log         = auto

[init]
    templatedir = ~/.git_template

[color "branch"]
    current = green
    local   = yellow
    remote  = red

[color "diff"]
    frag = magenta
    meta = yellow
    new  = green
    old  = red

[color "status"]
    added     = green
    changed   = yellow
    untracked = red

[push]
    # Make `git push` automatically push relevant annotated tags when pushing
    followTags = true

[alias]
################################################################################
#                 Just a status                                                #
################################################################################

    s = status

################################################################################
#                 Get the tag of the current commit                            #
################################################################################

    dt  = describe --tag

################################################################################
#                 clone recursive                                              #
################################################################################

    cn = clone --recursive

################################################################################
#                 Clean the repo of all untracke files                         #
################################################################################

    cl = clean -xdf .

################################################################################
#                 Submodule management                                         #
################################################################################

    sb    = submodule
    sbf   = submodule foreach
    sbfp  = submodule foreach git pull
    sbu   = submodule update
    sbur  = submodule update --recursive
    sbui  = submodule update --init
    sbuir = submodule update --init --recursive

################################################################################
#                 Quick add files                                              #
################################################################################

    a  = add
    aa = add --all
    ai = add -i

################################################################################
#                 Branch management                                            #
################################################################################

    b   = branch
    ba  = branch --all
    bd  = branch -d
    bdd = branch -D
    br  = branch -r

################################################################################
#                 Commit shortcuts                                             #
################################################################################

    c   = commit
    cm  = commit -m
    ca  = commit --amend

################################################################################
#                 Diff stuff                                                   #
################################################################################

    d   = diff
    dc  = diff --cached
    dk  = diff --check
    dp  = diff --patience

################################################################################
#                 Grep something in the current repo                           #
################################################################################

    g  = grep -nI --color
    gi = grep -nIi --color

################################################################################
#                 Git log stuff                                                #
################################################################################

    l   = log
    ll  = log --oneline
    lg  = log --graph
    llg = log --oneline --graph --decorate

################################################################################
#                 Git ls a bit simpler and with grep search                    #
################################################################################

    ls = ls-files

################################################################################
#                 Merge shortcuts                                              #
################################################################################

    m  = merge
    ma = merge --abort
    mc = merge --continue
    ms = merge --skip

################################################################################
#                 Checkout ** TODO add some more shortcuts                     #
################################################################################

    o  = checkout
    ob = checkout -b
    od = checkout --
    or = checkout .

################################################################################
#                 Shortcuts to push and pull changes                           #
################################################################################

    ps    = push
    psom  = push origin master
    pshm  = push origin HEAD:master

    pl    = pull
    plom  = pull origin master

    pb    = pull --rebase
    pbo   = pull --rebase origin
    pbom  = pull --rebase origin master

################################################################################
#                 Simple rebase settings                                       #
################################################################################

    rb = rebase
    rba = rebase --abort
    rbc = rebase --continue
    rbi = rebase --interactive
    rbs = rebase --skip

################################################################################
#                 Reset the HEAD of the repo                                   #
################################################################################

    re   = reset
    rh   = reset HEAD
    reh  = reset --hard
    res  = reset --soft
    rehh = reset --hard HEAD
    resh = reset --soft HEAD

################################################################################
#                 Remotes management                                           #
################################################################################

    r   = remote
    ra  = remote add
    rr  = remote rm
    rm  = remote rename
    rs  = remote show
    rao = remote add origin
    rso = remote show origin

################################################################################
#                 Stash stuff                                                  #
################################################################################

    sa = stash apply
    sc = stash clear
    sd = stash drop
    sl = stash list
    sp = stash pop
    ss = stash save
    sw = stash show

################################################################################
#      SVN compatibility (I have to use this crap, hope no one else need it)   #
################################################################################

    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit

################################################################################
#                 Custom functions                                             #
################################################################################

#   Create a stash of the current changes and then reapply them
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

#   Auto create tags files and place it in .git dir
    ctags = "!sh -c '[ -f .git/hooks/ctags ] || git init; .git/hooks/ctags'"

#   Update just one file form specific remote
    updatef  = "!f() { git fetch $1 && git checkout $1 -- $2; }; f"

#   Reset a staged file to its original state (index)
    rf  = "!f() { git reset HEAD $1 && git checkout -- $1; }; f"

#   Push the current branch to the master of a remote
    psrhm = "!f() { git push $1 HEAD:master }; f"

#   Seach some text in the tracked files
    lsf = "!git ls-files | grep -i"

#   Get the filesnames of all changes a given commit and the HEAD
    dn  = "!f() { git diff --name-status $1 HEAD; }; f"

#   Remove the tag with the specified tag name if exists and tag the latest
#   commit with that name.
    retag = "!f() { \
        git tag -d $1 &> /dev/null; \
        git tag $1; \
    }; f"

#   Find commits by commit message.
    cm = "!f() { \
        git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
    }; f"

#   Remove any given number of commits
    rlc  = "!f(){ git reset --hard HEAD~${1}; }; f"

#   Undo any given number of commits
    ulc  = "!f(){ git reset --soft HEAD~${1}; }; f"
