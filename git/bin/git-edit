#!/usr/bin/env bash

#
#                              -`
#              ...            .o+`
#           .+++s+   .h`.    `ooo/
#          `+++%++  .h+++   `+oooo:
#          +++o+++ .hhs++. `+oooooo:
#          +s%%so%.hohhoo'  'oooooo+:
#          `+ooohs+h+sh++`/:  ++oooo+:
#           hh+o+hoso+h+`/++++.+++++++:
#            `+h+++h.+ `/++++++++++++++:
#                     `/+++ooooooooooooo/`
#                    ./ooosssso++osssssso+`
#                   .oossssso-````/osssss::`
#                  -osssssso.      :ssss``to.
#                 :osssssss/  Mike  osssl   +
#                /ossssssss/   8a   +sssslb
#              `/ossssso+/:-        -:/+ossss'.-
#             `+sso+:-`                 `.-/+oso:
#            `++:.                           `-/+/
#            .`                                 `/

_VERBOSE=0

_NAME="$0"
_NAME="${_NAME##*/}"
_NAME="${_NAME##*-}"

_EDITOR="${EDITOR:-vim}"
_CACHED=""

_SCRIPT_PATH="$0"
_WORKTREE=""

_SCRIPT_PATH="${_SCRIPT_PATH%/*}"

if hash realpath 2>/dev/null; then
    _SCRIPT_PATH=$(realpath "$_SCRIPT_PATH")
else
    pushd "$_SCRIPT_PATH" 1> /dev/null || exit 1
    _SCRIPT_PATH="$(pwd -P)"
    popd 1> /dev/null || exit 1
fi

if ! hash is_windows 2>/dev/null; then
    function is_windows() {
        if [[ $SHELL_PLATFORM =~ (msys|cygwin|windows) ]]; then
            return 0
        fi
        return 1
    }
fi

if ! hash is_wls 2>/dev/null; then
    function is_wls() {
        if [[ "$(uname -r)" =~ Microsoft ]] ; then
            return 0
        fi
        return 1
    }
fi

if ! hash is_osx 2>/dev/null; then
    function is_osx() {
        if [[ $SHELL_PLATFORM == 'osx' ]]; then
            return 0
        fi
        return 1
    }
fi

# _DEFAULT_SHELL="${SHELL##*/}"
_CURRENT_SHELL="bash"

# shellcheck disable=SC2009,SC2046
_CURRENT_SHELL="$(ps | grep $$ | grep -Eo '(ba|z|tc|c)?sh')"
_CURRENT_SHELL="${_CURRENT_SHELL##*/}"
_CURRENT_SHELL="${_CURRENT_SHELL##*:}"

if ! is_windows; then
    # Hack when using sudo
    # TODO: Must fix this
    if [[ $_CURRENT_SHELL == "sudo" ]] || [[ $_CURRENT_SHELL == "su" ]]; then
        _CURRENT_SHELL="$(ps | head -4 | tail -n 1 | awk '{ print $4 }')"
    fi
fi

function help_user() {
    cat << EOF

Description:
    Quick edit modified files in a git repo

Usage:
    $_NAME [OPTIONAL]

        Ex.
        $ git $_NAME
        $ git $_NAME -c    # just the staged files
        $ git $_NAME -e ed # uses ed editor

    Optional Flags
        -c, --cached
            Edit just the staged files

        -e, --editor
            Change the default editor
                By default this uses \$EDITOR var and fallback vi in it's unset or empty

        -h, --help
            Display help, if you are seeing this, that means that you already know it (nice)
EOF
}

function __parse_args() {
    if [[ $# -lt 2 ]]; then
        echo ""
    fi

    local arg="$1"
    local name="$2"

    local pattern="^--${name}[=][a-zA-Z0-9._-/~]+$"

    if [[ -n "$3" ]]; then
        local pattern="^--${name}[=]$3$"
    fi

    if [[ $arg =~ $pattern ]]; then
        local left_side="${arg#*=}"
        echo "${left_side/#\~/$HOME}"
    else
        echo "$arg"
    fi
}

function warn_msg() {
    local warn_message="$1"
    printf "[!]     ---- Warning!!! %s \n" "$warn_message"
}

function error_msg() {
    local error_message="$1"
    printf "[X]     ---- Error!!!   %s \n" "$error_message" 1>&2
}

function status_msg() {
    local status_message="$1"
    printf "[*]     ---- %s \n" "$status_message"
}

function verbose_msg() {
    if [[ $_VERBOSE -eq 1 ]]; then
        local debug_message="$1"
        printf "[+]     ---- Debug!!!   %s \n" "$debug_message"
    fi
}

while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
        --verbose)
            _VERBOSE=1
            ;;
        -h|--help)
            help_user
            exit 0
            ;;
        -e|--editor)
            if [[ -z "$2" ]]; then
                error_msg "No editor received"
                exit 1
            elif ! hash "$2" 2> /dev/null; then
                error_msg "Not a valid editor $2"
                exit 1
            fi
            _EDITOR="$2"
            shift
            ;;
        -c|--cached)
            _CACHED="--cached"
            ;;
        *)
            error_msg "Unknown argument $key"
            help_user
            exit 1
            ;;
    esac
    shift
done

# _GITDIR="$(git rev-parse --git-dir)"
worklist=($(git worktree list | awk '{print $1}'))
for i in ${worklist[*]}; do
    [[ "$i" == "$(git rev-parse --show-toplevel)" ]] && _WORKTREE="$i"
done

if [[ -n "$_CACHED" ]]; then
    if [[ -n "$_WORKTREE" ]]; then
        _FILES=($(git --no-pager --work-tree="$_WORKTREE" status --short | awk '{print $2}'))
    else
        _FILES=($(git --no-pager status --short | awk '{print $2}'))
    fi
else
    if [[ -n "$_WORKTREE" ]]; then
        _FILES=($(git --no-pager --work-tree="$_WORKTREE" status --short | awk '{print $2}'))
    else
        _FILES=($(git --no-pager status --short | awk '{print $2}'))
    fi
fi


if [[ -n $_FILES ]]; then
    "$_EDITOR" "${_FILES[@]}"
else
    warn_msg "No files to edit"
fi

exit 0
