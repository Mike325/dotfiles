#!/usr/bin/env bash

################################################################################
#                                                                              #
#   Author: Mike 8a                                                            #
#   Description: Some useful alias                                             #
#                                                                              #
#                                     -`                                       #
#                     ...            .o+`                                      #
#                  .+++s+   .h`.    `ooo/                                      #
#                 `+++%++  .h+++   `+oooo:                                     #
#                 +++o+++ .hhs++. `+oooooo:                                    #
#                 +s%%so%.hohhoo'  'oooooo+:                                   #
#                 `+ooohs+h+sh++`/:  ++oooo+:                                  #
#                  hh+o+hoso+h+`/++++.+++++++:                                 #
#                   `+h+++h.+ `/++++++++++++++:                                #
#                            `/+++ooooooooooooo/`                              #
#                           ./ooosssso++osssssso+`                             #
#                          .oossssso-````/osssss::`                            #
#                         -osssssso.      :ssss``to.                           #
#                        :osssssss/  Mike  osssl   +                           #
#                       /ossssssss/   8a   +sssslb                             #
#                     `/ossssso+/:-        -:/+ossss'.-                        #
#                    `+sso+:-`                 `.-/+oso:                       #
#                   `++:.                           `-/+/                      #
#                   .`   github.com/mike325/dotfiles   `/                      #
#                                                                              #
################################################################################

# TODO split the file into smaller packages

################################################################################
#   Some useful functions taken from https://github.com/Bash-it/bash-it/       #
################################################################################

# if [[ ! -z $ALIAS_LOAD ]]; then
#     unalias --all
# fi

# Create a dir an move to it
function mkcd () {
    if [[ ! -z $1 ]]; then
        mkdir "$1"
        cd "$1"
    fi
}

# Disk usage per directory in Linux
function usage () {
    if [ -n "$1" ]; then
        du -h --max-depth=1 "$1"
    else
        du -h --max-depth=1
    fi
}

# Display all ip addresses for this host
function ips () {
    if command -v ifconfig &>/dev/null; then
        ifconfig | awk '/inet /{ print $2 }'
    elif command -v ip &>/dev/null; then
        ip addr | grep -oP 'inet \K[\d.]+'
    else
        echo "    ---- [X] Error You don't have ifconfig or ip command installed!"
    fi
}

# Checks whether a website is down for you, or everybody
# $ down4me http://www.google.com
function down4me () {
    curl -s "http://www.downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g'
}

# Displays your IP address, as seen by the Internet
function myip () {
    res=$(curl -s checkip.dyndns.org | grep -Eo '[0-9\.]+')
    echo -e "Your public IP is: ${echo_bold_green} $res ${echo_normal}"
}

# Move files to hidden folder in tmp, that gets cleared on each reboot
function del() {
    mkdir -p /tmp/.trash && mv --backup=numbered "$@" /tmp/.trash;
}


################################################################################
#                          Set the default text editor                         #
################################################################################

# Move the current folder to the "trash" and rename the second folder
# Do not accept parameters apart from the dirs
function override() {
    if [[ ! -z "$1" ]] && [[ ! -z "2" ]]; then
        mkdir -p /tmp/.trash
        mv --backup=numbered "$2" /tmp/.trash
        mv "$1" "$2" /tmp/.trash
    fi
}

if hash nvim 2>/dev/null; then
    export EDITOR='nvim'
    VIM_PATH="$(command -v vim)"

    # Prevent to screw the path alias
    if [[ ! $VIM_PATH =~ "alias" ]]; then
        alias vim="nvim"
        alias vi="$VIM_PATH"
        alias cdvim="cd ~/.config/nvim"
        alias cdvi="cd ~/.vim"
    fi
else
    export EDITOR='vim'
    alias cdvim="cd ~/.vim"
fi

alias vimu="vim -u NONE"

if hash emacs 2>/dev/null; then
    function cmacs() {
        emacsclient -nw "$@"
    }

    function gmacs() {
        emacsclient -c "$@" &
    }

    function dmacs() {
        emacs --daemon &
    }

    function kmacs() {
        emacsclient -e "(kill-emacs)"
    }
fi

################################################################################
#                         Small script to install Neovim                       #
################################################################################

# Small script to install Neovim
# Warning ! This script delete everything in the work directory before install
function show_nvim_libs() {
    echo "Please also consider to install the python libs"
    echo "  $ pip3 install --user neovim && pip2 install --user neovim"
    echo "and Ruby libs"
    echo "  $ gem install --user-install neovim"
    echo ""
}

function show_nvim_help() {
    echo "    ---- [X] Error Please make sure you have all the depencies in your system"
    echo ""
    echo "Ubuntu/Debian/Linux mint"
    echo "  # apt-get install libtool libtool-bin autoconf automake cmake g++ pkg-config unzip"
    echo ""
    echo "CentOS/RetHat/Fedora"
    echo "  # dnf install libtool autoconf automake cmake gcc gcc-c++ make pkgconfig unzip"
    echo ""
    echo "ArchLinux/Antergos/Manjaro"
    echo "  # pacman -S base-devel cmake unzip"
    echo ""

    show_nvim_libs

    echo "For other Unix systems (BSD, Linux and MacOS) and Windows please check"
    echo "  https://github.com/neovim/neovim/wiki/Building-Neovim"
}

function install_nvim() {
    LOCATION="$HOME/.local/neovim"
    URL="https://github.com/neovim/neovim"

    if [[ ! -z "$1" ]] && [[ "$1" =~ ^-d$ ]]; then

        if [[ ! -z "$2" ]]; then
            LOCATION="$2"
        else
            mkdir -p "$LOCATION"
        fi

        git clone --recursive "$URL" "$LOCATION"

        if [[ $? -ne 0 ]]; then
            return 1
        fi
    fi

    cd "$LOCATION"

    # Remove all unstaged changes
    git checkout . 2>/dev/null

    if [[ $? -ne 0 ]]; then
        return 1
    fi

    # Remove all untracked files
    git clean -xdf . 2>/dev/null
    rm -fr build/

    # Checkout to the stable branch
    git checkout v0.1.7 2>/dev/null

    # Always clean the build dir
    make clean

    # Prefix the current dir
    make CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX=$(pwd)"

    # Set the type release to avoid debug messages
    make CMAKE_BUILD_TYPE=Release

    # Continue only if there isn't errors
    if [[ $? -eq 0 ]]; then
        make install
        if [[ $? -eq 0 ]]; then
            export PATH="$(pwd)/bin:$PATH"

            echo ""
            echo "You may want to add export PATH=\"$(pwd)/bin:\$PATH\" in the shell_alias"
            echo ""

            show_nvim_libs
        else
            show_nvim_help
            return 1
        fi
    else
        show_nvim_help
        return 1
    fi

    cd - &> /dev/null

    return 0
}

################################################################################
#                 Small script to install some shell frameworks                #
################################################################################

# Small script to install bash-it or oh-my-zsh shell frameworks
function install_shell() {
    if [[ "$SHELL" =~ "bash" ]] && [[ ! -d "$HOME/.bash_it" ]]; then
        git clone --recursive https://github.com/bash-it/bash-it "$HOME/.bash_it" 2>/dev/null
    elif [[ "$SHELL" =~ "zsh" ]] && [[ ! -d "$HOME/.oh-my-zsh" ]]; then
        if hash curl 2>/dev/null; then
            sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
        elif hash wget 2>/dev/null; then
            sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"
        else
            git clone --recursive https://github.com/robbyrussell/oh-my-zsh "$HOME/.oh-my-zsh" 2>/dev/null
        fi
    else
        echo "    ---- [X] Error the current shell is not supported"
    fi
}

################################################################################
#                          Fix my common typos                                 #
################################################################################

alias gti="git"
alias got="git"
alias gut="git"
alias gi="git"

alias bim="vim"
alias cim="vim"
alias im="vim"

################################################################################
#                        Alias and Functions                                   #
################################################################################

# Small Function that compress a file or directory with the same name as
# output
function tcmp() {
    if [[ ! -z "$1" ]]; then
        NAME="$1"
        tar czf "$NAME.tar.bz" "$NAME"
    fi
}

alias q="exit"

function rl() {
    rm "$@" *.log
}

alias ports="netstat -tulpn"

alias grep="grep --color -n"
alias grepo="grep -o"
alias grepe="grep -E"

function llg() {
    if [[ ! -z "$1" ]]; then
        ls -lhA | grep "$@"
    fi
}

alias ls='ls --color'
alias la="ls -A"
alias ll="ls -lh"
alias lla="ls -lhA"
alias cl="clear"
alias turnoff="sudo poweroff"

# Function to go back any number of dirs
function bk() {
    if [[ ! -z "$1" ]] && [[ $1 =~ ^[0-9]+$ ]]; then
        PARENT="./"

        for (( i = 0; i < $1; i++ )); do
            PARENT="${PARENT}../"
        done
        cd "$PARENT"
    elif [[ -z "$1" ]]; then
        cd ..
    else
        echo "Unexpected arg $1"
        return 1
    fi
}

alias salias="source ~/.shell_alias"
alias sset="source ~/.shell_settings"

######## This way sudo commands get the alias of the account
alias sudo='sudo '

######## Magnificent app which corrects your previous console command https://github.com/nvbn/thefuck
if hash thefuck 2>/dev/null; then
    eval "$(thefuck --alias)"
    alias fuck='eval $(thefuck $(fc -ln -1))'
    alias please='fuck'
fi

if hash realpath 2>/dev/null; then
    function grp() {
        if [[ ! -z "$1" ]]; then
            realpath "$@"
        else
            realpath "."
        fi
    }
else
    # TODO Optimize code for file management
    function grp() {
        if [[ ! -z "$1" ]]; then
            FULL_PATH="$1"
            ROOT_PATH="${FULL_PATH%/*}"
            FILE_PATH="${FULL_PATH##*/}"

            pushd . > /dev/null

            if [[ -f "$FULL_PATH" ]]; then
                pushd "$ROOT_PATH" &> /dev/null

                # I haven't think a better way to check if the given path was
                # push into the stack, that's why I can't print the path a
                # then pop it
                if [[ $? -eq 0 ]]; then
                    echo "$(pwd -P)/$FILE_PATH"
                    popd > /dev/null
                else
                    echo "$(pwd -P)/$FILE_PATH"
                fi


            elif [[ -d "$FULL_PATH" ]]; then
                ROOT_PATH="$1"

                pushd "$ROOT_PATH" > /dev/null

                echo "$(pwd -P)"

                popd > /dev/null
            else
                echo "    ---- [X] Error 404 the given path doesn't exist"
            fi

            # Retrun to the original dir
            popd > /dev/null

        else
            pwd -P
        fi
    }
fi

# Credit: http://nparikh.org/notes/zshrc.txt
function extract() {
    while [[ $# -gt 0 ]]; do
        if [[ -f "$1" ]]; then
            case "$1" in
                *.tar.bz2|*.tbz2) echo "[*] Extracting $1"; tar -jxvf "$1" 1> /dev/null;;
                *.tar.gz|*.tgz)   echo "[*] Extracting $1"; tar -zxvf "$1" 1> /dev/null;;
                *.zip|*.ZIP)      echo "[*] Extracting $1"; unzip "$1" 1> /dev/null;;
                *.tar.bz)         echo "[*] Extracting $1"; tar -xf "$1" 1> /dev/null;;
                *.pax.Z)          echo "[*] Extracting $1"; uncompress "$1" 1> /dev/null;;
                *.bz2)            echo "[*] Extracting $1"; bunzip2 "$1" 1> /dev/null;;
                *.dmg)            echo "[*] Extracting $1"; hdiutil mount "$1" 1> /dev/null;;
                *.tar)            echo "[*] Extracting $1"; tar -xvf "$1" 1> /dev/null;;
                *.pax)            echo "[*] Extracting $1"; cat "$1" 1> /dev/null;;
                *.rar)            echo "[*] Extracting $1"; unrar x "$1" 1> /dev/null;;
                *.7z)             echo "[*] Extracting $1"; 7z x "$1" 1> /dev/null;;
                *.gz)             echo "[*] Extracting $1"; gunzip "$1" 1> /dev/null;;
                *.Z)              echo "[*] Extracting $1"; uncompress "$1" 1> /dev/null;;
                *)                echo "    ---- [X] Error '$1' cannot be extracted/mounted via extract()" ;;
            esac
        else
            echo "    ---- [X] Error '$1' is not a valid file"
        fi
        shift
    done
}

# Init original path with HOME dir
ORIGINAL_PATH="$(pwd)"

# Move to the realpath version of the curren working dir
function crp() {
    # Save the current path
    ORIGINAL_PATH="$(pwd)"
    cd "$(grp)"
}

# Go back to the last sym path or $HOME
function gobk() {
    cd "$ORIGINAL_PATH"
}

if hash ctags 2>/dev/null; then
    alias gtf="ctags -R ."
fi

#####################    systemctl     #######################
if hash systemctl 2>/dev/null; then
    alias sysctl="sudo systemctl"
    alias usysctl="systemctl --user"

    alias ctls="sudo systemctl start"   # Start
    alias ctlh="sudo systemctl stop"    # Halt
    alias ctlr="sudo systemctl restart" # Restart
    alias ctlw="sudo systemctl status"  # shoW
fi

#####################    GIT     #######################
function git_stats {
    # Awesome work from https://github.com/esc/git-stats
    # including some modifications

    if [ -n "$(git symbolic-ref HEAD 2> /dev/null)" ]; then
        echo "Number of commits per author:"
        git --no-pager shortlog -sn --all
        AUTHORS=$( git shortlog -sn --all | cut -f2 | cut -f1 -d' ')
        LOGOPTS=""
        if [[  "$1" == '-w' ]]; then
            LOGOPTS="$LOGOPTS -w"
            shift
        fi
        if [[  "$1" == '-M' ]]; then
            LOGOPTS="$LOGOPTS -M"
            shift
        fi
        if [[  "$1" == '-C' ]]; then
            LOGOPTS="$LOGOPTS -C --find-copies-harder"
            shift
        fi
        for a in $AUTHORS
        do
            echo '-------------------'
            echo "Statistics for: $a"
            echo -n "Number of files changed: "
            git log $LOGOPTS --all --numstat --format="%n" --author=$a | cut -f3 | sort -iu | wc -l
            echo -n "Number of lines added: "
            git log $LOGOPTS --all --numstat --format="%n" --author=$a | cut -f1 | awk '{s+=$1} END {print s}'
            echo -n "Number of lines deleted: "
            git log $LOGOPTS --all --numstat --format="%n" --author=$a | cut -f2 | awk '{s+=$1} END {print s}'
            echo -n "Number of merges: "
            git log $LOGOPTS --all --merges --author=$a | grep -c '^commit'
        done
    else
        echo "    ---- [X] Error You're currently not in a git repository"
    fi
}

if hash git 2>/dev/null; then
    alias clone="git clone"
    alias ga="git add"
    alias gs="git status"
    alias gc="git commit"
    alias gps="git push"
    alias gpl="git pull"
    alias gco="git checkout "
    alias gr="git reset"
    alias gss="git stash save"
    alias gsp="git stash pop"
    alias gsd="git stash drop"
    alias gsa="git stash apply"
    alias gsl="git stash list"
    alias gsw="git stash show"
fi

#####################     VB      #######################
alias vbk="sudo modprobe vboxdrv"

################  package management ##################

# TODO Make a small function to install system basics

if hash docker 2>/dev/null; then
    alias docker="sudo docker"
    alias docker-compose="sudo docker-compose"
    alias dkpa="docker ps -a"
fi

# Yeah I'm too lazy to remember each command in every distro soooooo
# I added this alias
# TODO add other distros commands I've used, like Solus
if hash yaourt 2>/dev/null; then
    # 'Install' package maybe in the PATH
    alias get="yaourt -S"
    alias getn="yaourt -S --noconfirm"

    alias update="yaourt -Syyu --aur"

    alias update="yaourt -Syyu --aur"
    alias updaten="yaourt -Syyu --aur --noconfirm"

    alias remove="yaourt -Rns"

# Yeah Arch from scratch may not have yaourt
elif hash pacman 2>/dev/null; then
    alias get="sudo pacman -S"
    alias getn="sudo pacman -S --noconfirm"

    alias update="sudo pacman -Syyu"
    alias updaten="sudo pacman -Syyu --noconfirm"

    alias remove="sudo pacman -Rns"

elif hash apt-get 2>/dev/null; then
    alias get="sudo apt-get install"
    alias getn="sudo apt-get install -y"

    alias update="sudo apt-get update && sudo apt-get upgrade"

    alias remove="sudo apt-get remove"

elif hash dnf 2>/dev/null; then
    alias get="sudo dnf install"
    alias getn="sudo dnf -y install"

    alias update="sudo dnf update"

    alias remove="sudo dnf remove"
fi

# To know whether or not alias have been already loaded
# ALIAS_LOAD=1
